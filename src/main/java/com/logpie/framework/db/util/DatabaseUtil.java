package com.logpie.framework.db.util;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.logpie.framework.db.annotation.AutoGenerate;
import com.logpie.framework.db.annotation.Column;
import com.logpie.framework.db.annotation.ForeignEntity;
import com.logpie.framework.db.annotation.Table;

public class DatabaseUtil {

	private static final Logger logger = Logger.getLogger(DatabaseUtil.class
			.getName());

	/**
	 * 
	 * @param c
	 * @param hasAutogeneratedKey
	 * @return
	 */
	public static List<String> getColumnNameList(Class<?> c,
			boolean hasAutogeneratedKey) {
		List<String> res = new ArrayList<String>();
		List<Column> columnList = getColumns(c, hasAutogeneratedKey);
		for (Column column : columnList) {
			res.add(column.name());
		}
		return res;
	}

	public static Class<?> getColumnTypeByName(Class<?> c, String name) {
		List<Column> columnList = getColumns(c, true);
		for (Column column : columnList) {
			if (column.name().equals(name)) {
				switch (column.type()) {
				case BOOLEAN:
					return Boolean.class;
				case LONG:
					return Long.class;
				case DOUBLE:
					return Double.class;
				case TIMESTAMP:
					return Timestamp.class;
				default:
					return String.class;
				}
			}
		}
		logger.log(Level.WARNING, "cannot find any column");
		return null;
	}

	public static String getPrimaryKeyName(Class<?> c) {
		List<Column> columnList = getColumns(c, true);
		for (Column column : columnList) {
			if (column.isPrimaryKey()) {
				return column.name();
			}
		}
		logger.log(Level.WARNING, "cannot find any primary key");
		return null;
	}

	public static String getTableName(Class<?> c) {
		if (getTable(c) == null) {
			logger.log(Level.WARNING, "cannot find any table");
			return null;
		}
		return getTable(c).name();
	}

	public static List<String> getQueryColumns(Class<?> c) {
		List<String> res = new ArrayList<String>();

		// add columns in current table
		List<Column> keys = getColumns(c, true);
		if (keys == null || keys.isEmpty()) {
			logger.log(Level.SEVERE, "cannot find columns in table "
					+ getTable(c));
			return null;
		}
		for (Column key : keys) {
			res.add(getTableAliasOrName(c) + "." + key.name());
		}

		// add referenced columns in related tables
		List<ForeignEntity> foreignEntities = getForeignEntities(c);
		if (!foreignEntities.isEmpty()) {
			for (ForeignEntity entity : foreignEntities) {
				List<Column> referencedKeys = new ArrayList<Column>();
				referencedKeys
						.addAll(getColumns(entity.referencedTable(), true));
				for (Column key : referencedKeys) {
					res.add(getTableAliasOrName(entity.referencedTable()) + "."
							+ key.name());
				}
			}
		}

		return res;
	}

	public static Map<String, String> getInsertColumnsAndValues(Object model,
			boolean hasAutogeneratedKey) {

		StringBuffer keyBuffer = new StringBuffer();
		StringBuffer valueBuffer = new StringBuffer();
		Map<String, Object> modelMap = getModelMap(model, hasAutogeneratedKey);
		if (modelMap == null || modelMap.isEmpty()) {
			logger.log(Level.SEVERE, "cannot get model map in table "
					+ getTable(model.getClass()));
			return null;
		}

		int i = 0;
		int size = modelMap.size();
		for (Map.Entry<String, Object> entry : modelMap.entrySet()) {
			keyBuffer.append(entry.getKey());
			if (i < size - 1) {
				keyBuffer.append(", ");
			}
			String value = (String) entry.getValue();
			if (getColumnTypeByName(model.getClass(), entry.getKey()) == String.class) {
				valueBuffer.append("'");
				valueBuffer.append(value);
				valueBuffer.append("'");
			} else {
				valueBuffer.append(value);
			}
			if (i < size - 1) {
				valueBuffer.append(", ");
			}
			i++;
		}

		Map<String, String> res = new HashMap<String, String>();
		res.put("column", keyBuffer.toString());
		res.put("value", valueBuffer.toString());
		return res;
	}

	/**
	 * build a map between database keys and java entities
	 * 
	 * @param model
	 *            is related java entity instance
	 * @param hasAutogeneratedKey
	 *            determines whether the map contains auto-generated keys
	 * @return a hash-map which is mapping database key to java entity, where
	 *         key is database key name and value is java entity
	 */
	public static Map<String, Object> getModelMap(Object model,
			boolean hasAutogeneratedKey) {
		final Map<String, Object> result = new HashMap<String, Object>();
		Field[] fields = model.getClass().getDeclaredFields();
		for (Field field : fields) {
			if (field.isAnnotationPresent(Column.class)) {
				Column column = field.getAnnotation(Column.class);
				if (!hasAutogeneratedKey
						&& field.isAnnotationPresent(AutoGenerate.class)) {
					continue;
				}
				Object value = runGetter(field, model);
				result.put(column.name(), value);
			}

		}
		return result;
	}

	protected static List<Column> getColumns(Class<?> c,
			boolean hasAutogeneratedKey) {
		List<Column> res = new ArrayList<Column>();

		Field[] fields = c.getDeclaredFields();
		for (Field field : fields) {
			if (field.isAnnotationPresent(Column.class)) {
				Column column = field.getAnnotation(Column.class);
				if (!hasAutogeneratedKey
						&& field.isAnnotationPresent(AutoGenerate.class)) {
					continue;
				}
				res.add(column);
			}
		}
		return res;
	}

	protected static List<ForeignEntity> getForeignEntities(Class<?> c) {
		List<ForeignEntity> res = new ArrayList<ForeignEntity>();

		List<ForeignEntity> keys = new ArrayList<ForeignEntity>();
		Field[] fields = c.getDeclaredFields();
		for (Field field : fields) {
			if (field.isAnnotationPresent(ForeignEntity.class)) {
				ForeignEntity column = field.getAnnotation(ForeignEntity.class);
				keys.add(column);
				res.add(column);
			}
		}
		while (!keys.isEmpty()) {
			List<ForeignEntity> moreKeys = new ArrayList<ForeignEntity>();
			for (ForeignEntity key : keys) {
				Class<?> tableClass = key.referencedTable();
				if (hasForeignEntity(tableClass)) {
					moreKeys.addAll(getForeignEntities(tableClass));
				}
			}
			keys = moreKeys;
			res.addAll(keys);
		}
		return res;
	}

	protected static boolean hasForeignEntity(Class<?> c) {
		Field[] fields = c.getDeclaredFields();
		for (Field field : fields) {
			if (field.isAnnotationPresent(ForeignEntity.class)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 
	 * @param c
	 * @return table alias if alias existed, otherwise will return table name
	 */
	protected static String getTableAliasOrName(Class<?> c) {
		if (getTable(c) == null) {
			logger.log(Level.WARNING, "cannot find any table");
			return null;
		}
		return getTable(c).tableAlias().isEmpty() ? getTable(c).name()
				: getTable(c).tableAlias();
	}

	protected static boolean hasTableAlias(Class<?> c) {
		if (getTable(c) == null || getTable(c).tableAlias().isEmpty()) {
			return false;
		}
		return true;
	}

	protected static Table getTable(Class<?> c) {
		if (c.isAnnotationPresent(Table.class)) {
			return c.getAnnotation(Table.class);
		}
		return null;
	}

	private static Object runGetter(Field field, Object model) {
		for (Method method : model.getClass().getMethods()) {
			if (method.getName().startsWith("get")
					&& method.getName().length() == field.getName().length() + 3) {
				if (method.getName().toLowerCase()
						.endsWith(field.getName().toLowerCase())) {
					try {
						return method.invoke(model);
					} catch (IllegalAccessException e) {
						logger.log(Level.SEVERE,
								"cannot get access to this method");
						e.printStackTrace();
					} catch (IllegalArgumentException e) {
						logger.log(Level.SEVERE,
								"passed illegal argument to this method");
						e.printStackTrace();
					} catch (InvocationTargetException e) {
						logger.log(Level.SEVERE,
								"this method cannot be invoked");
						e.printStackTrace();
					}
				}
			}
		}
		logger.log(Level.WARNING, "cannot find getter method for this field");
		return null;
	}
}
