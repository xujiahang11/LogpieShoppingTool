package com.logpie.framework.db.util;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.logpie.framework.db.annotation.DatabaseForeignKey;
import com.logpie.framework.db.annotation.DatabaseKey;
import com.logpie.framework.db.annotation.DatabaseTable;

public class DatabaseUtil {

	/**
	 * 
	 * @param c
	 * @param hasAutogeneratedKey
	 * @return
	 */
	public static List<String> getColumnNameList(Class<?> model,
			boolean hasAutogeneratedKey) {
		List<String> res = new ArrayList<String>();
		List<DatabaseKey> columnList = getKeyList(model, hasAutogeneratedKey);
		for (DatabaseKey column : columnList) {
			res.add(column.name());
		}
		return res;
	}

	public static Class<?> getColumnTypeByName(Class<?> model, String name) {
		List<DatabaseKey> columnList = getKeyList(model, true);
		for (DatabaseKey column : columnList) {
			if (column.name().equals(name)) {
				switch (column.type()) {
				case BOOLEAN:
					return Boolean.class;
				case LONG:
					return Long.class;
				case DOUBLE:
					return Double.class;
				case TIMESTAMP:
					return Timestamp.class;
				default:
					return String.class;
				}
			}
		}
		return null;
	}

	public static String getPrimaryKeyName(Class<?> model) {
		List<DatabaseKey> columnList = getKeyList(model, true);
		for (DatabaseKey column : columnList) {
			if (column.isPrimaryKey()) {
				return column.name();
			}
		}
		return null;
	}

	public static String getTableName(Class<?> model) {
		if (getTable(model) == null) {
			return null;
		}
		return getTable(model).name();
	}

	/**
	 * 
	 * @param model
	 * @return table alias if alias existed, otherwise will return table name
	 */
	public static String getTableAlias(Class<?> model) {
		if (getTable(model) == null) {
			return null;
		}
		return getTable(model).tableAlias().isEmpty() ? getTable(model).name()
				: getTable(model).tableAlias();
	}

	public static boolean hasTableAlias(Class<?> model) {
		if (getTable(model) == null || getTable(model).tableAlias().isEmpty()) {
			return false;
		}
		return true;
	}

	public static List<String> getQueryColumns(Class<?> model) {
		List<String> res = new ArrayList<String>();

		// add columns in current table
		List<DatabaseKey> keys = getKeyList(model, true);
		for (DatabaseKey key : keys) {
			res.add(getTableAlias(model) + "." + key.name());
		}
		// add referenced columns in related tables
		List<Class<?>> referencedTables = getReferencedTableList(model);
		if (!referencedTables.isEmpty()) {
			for (Class<?> table : referencedTables) {
				List<DatabaseKey> referencedKeys = new ArrayList<DatabaseKey>();
				referencedKeys.addAll(getKeyList(table, true));
				for (DatabaseKey key : referencedKeys) {
					res.add(getTableAlias(table) + "." + key.name());
				}
			}
		}

		return res;
	}

	public static Map<String, String> getInsertColumnsAndValues(Object model,
			boolean hasAutogeneratedKey) {

		StringBuffer keyBuffer = new StringBuffer();
		StringBuffer valueBuffer = new StringBuffer();
		Map<String, Object> modelMap = getModelMap(model, hasAutogeneratedKey);
		int i = 0;
		int size = modelMap.size();
		for (Map.Entry<String, Object> entry : modelMap.entrySet()) {
			keyBuffer.append(entry.getKey());
			if (i < size - 1) {
				keyBuffer.append(", ");
			}
			String value = (String) entry.getValue();
			if (getColumnTypeByName(model.getClass(), entry.getKey()) == String.class) {
				valueBuffer.append("'");
				valueBuffer.append(value);
				valueBuffer.append("'");
			} else {
				valueBuffer.append(value);
			}
			if (i < size - 1) {
				valueBuffer.append(", ");
			}
			i++;
		}

		Map<String, String> res = new HashMap<String, String>();
		res.put("column", keyBuffer.toString());
		res.put("value", valueBuffer.toString());
		return res;
	}

	/**
	 * build a map between database keys and java entities
	 * 
	 * @param model
	 *            is the class of the related java entity
	 * @param hasAutogeneratedKey
	 *            determines whether the map contains auto-generated keys
	 * @return a hash-map which is mapping database key to java entity, where
	 *         key is database key name and value is java entity
	 */
	public static Map<String, Object> getModelMap(Object model,
			boolean hasAutogeneratedKey) {
		final Map<String, Object> result = new HashMap<String, Object>();
		Method[] methods = model.getClass().getMethods();

		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseKey.class)) {
				DatabaseKey column = method.getAnnotation(DatabaseKey.class);

				if (!hasAutogeneratedKey && column.autoGenerated()) {
					continue;
				}
				try {
					Object value = method.invoke(model);
					result.put(column.name(), value);
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}

		}
		return result;
	}

	protected static DatabaseTable getTable(Class<?> model) {
		if (model.isAnnotationPresent(DatabaseTable.class)) {
			return model.getAnnotation(DatabaseTable.class);
		}
		return null;
	}

	protected static List<DatabaseKey> getKeyList(Class<?> model,
			boolean hasAutogeneratedKey) {
		List<DatabaseKey> res = new ArrayList<DatabaseKey>();

		Method[] methods = model.getMethods();
		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseKey.class)) {
				DatabaseKey column = method.getAnnotation(DatabaseKey.class);
				if (!hasAutogeneratedKey && column.autoGenerated()) {
					continue;
				}
				res.add(column);
			}
		}
		return res;
	}

	protected static List<DatabaseForeignKey> getForeignKeyList(Class<?> model) {
		List<DatabaseForeignKey> res = new ArrayList<DatabaseForeignKey>();

		Method[] methods = model.getMethods();
		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseForeignKey.class)) {
				DatabaseForeignKey column = method
						.getAnnotation(DatabaseForeignKey.class);
				res.add(column);
			}
		}
		return res;
	}

	protected static List<Class<?>> getReferencedTableList(Class<?> model) {
		List<Class<?>> res = new ArrayList<Class<?>>();
		List<DatabaseForeignKey> keys = getForeignKeyList(model);
		if (keys.isEmpty()) {
			return res;
		}
		while (!keys.isEmpty()) {
			List<DatabaseForeignKey> moreKeys = new ArrayList<DatabaseForeignKey>();
			for (DatabaseForeignKey key : keys) {
				Class<?> tableModel = key.referencedTableModel();
				if (hasForeignKey(tableModel)) {
					moreKeys = getForeignKeyList(tableModel);
				}
				res.add(tableModel);
			}
			keys = moreKeys;
		}
		return res;
	}

	private static boolean hasForeignKey(Class<?> model) {
		Method[] methods = model.getMethods();
		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseForeignKey.class)) {
				return true;
			}
		}
		return false;
	}

}
