package com.logpie.framework.db.util;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.logpie.framework.db.annotation.DatabaseColumn;
import com.logpie.framework.db.annotation.DatabaseEntity;

public class DatabaseUtil {

	/**
	 * 
	 * @param c
	 * @param hasAutogeneratedKey
	 * @return
	 */
	public static List<String> getColumnNameList(Class<?> model,
			boolean hasAutogeneratedKey) {
		List<String> res = new ArrayList<String>();
		List<DatabaseColumn> columnList = getColumnList(model,
				hasAutogeneratedKey);
		for (DatabaseColumn column : columnList) {
			res.add(column.name());
		}
		return res;
	}

	public static Class<?> getColumnTypeByName(Class<?> model, String name) {
		Method[] methods = model.getMethods();

		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseColumn.class)) {
				DatabaseColumn column = method
						.getAnnotation(DatabaseColumn.class);
				if (column.name().equals(name)) {
					switch (column.type()) {
					case BOOLEAN:
						return Boolean.class;
					case LONG:
						return Long.class;
					case DOUBLE:
						return Double.class;
					case TIMESTAMP:
						return Timestamp.class;
					default:
						return String.class;
					}
				}
			}
		}

		return null;
	}

	public static String getPrimaryKey(Class<?> model) {
		List<DatabaseColumn> columnList = getColumnList(model, true);
		for (DatabaseColumn column : columnList) {
			if (column.primaryKey()) {
				return column.name();
			}
		}
		return null;
	}

	public static String getTableName(Class<?> model) {
		if (model.isAnnotationPresent(DatabaseEntity.class)) {
			return model.getAnnotation(DatabaseEntity.class).table();
		}
		return null;
	}

	/**
	 * build a map between database keys and java entities
	 * 
	 * @param c
	 *            is the class of the related java entity
	 * @param hasAutogeneratedKey
	 *            determines whether the map contains auto-generated keys
	 * @return a hash-map which is mapping database key to java entity, where
	 *         key is database key name and value is java entity
	 */
	public static Map<String, Object> getModelMap(Object model,
			boolean hasAutogeneratedKey) {
		final Map<String, Object> result = new HashMap<String, Object>();
		Method[] methods = model.getClass().getMethods();

		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseColumn.class)) {
				DatabaseColumn column = method
						.getAnnotation(DatabaseColumn.class);

				if (!hasAutogeneratedKey && column.autoGenerated()) {
					continue;
				}
				try {
					Object value = method.invoke(model);
					result.put(column.name(), value);
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}

		}
		return result;
	}

	public static Map<String, String> serializeColumnAndValue(Object model,
			boolean hasAutogeneratedKey) {

		StringBuffer keyBuffer = new StringBuffer();
		StringBuffer valueBuffer = new StringBuffer();
		Map<String, Object> modelMap = getModelMap(model, hasAutogeneratedKey);
		int i = 0;
		int size = modelMap.size();
		for (Map.Entry<String, Object> entry : modelMap.entrySet()) {
			keyBuffer.append(entry.getKey());
			if (i < size - 1) {
				keyBuffer.append(", ");
			}
			String value = (String) entry.getValue();
			if (getColumnTypeByName(model.getClass(), entry.getKey()) == String.class) {
				valueBuffer.append("'");
				valueBuffer.append(value);
				valueBuffer.append("'");
			} else {
				valueBuffer.append(value);
			}
			if (i < size - 1) {
				valueBuffer.append(", ");
			}
			i++;
		}

		Map<String, String> res = new HashMap<String, String>();
		res.put("column", keyBuffer.toString());
		res.put("value", valueBuffer.toString());
		return res;
	}

	private static List<DatabaseColumn> getColumnList(Class<?> model,
			boolean hasAutogeneratedKey) {
		List<DatabaseColumn> res = new ArrayList<DatabaseColumn>();
		Method[] methods = model.getMethods();

		for (Method method : methods) {
			if (method.isAnnotationPresent(DatabaseColumn.class)) {
				DatabaseColumn column = method
						.getAnnotation(DatabaseColumn.class);
				if (!hasAutogeneratedKey && column.autoGenerated()) {
					continue;
				}
				res.add(column);
			}
		}
		return res;
	}

}
